# input {
#   beats {
#     port => 5044
#   }
# }

# filter {
#   if [log][file][path] =~ "error" {
#     grok {
#       match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} \[%{WORD:log_level}\] %{GREEDYDATA:error_message}" }
#     }
#     date {
#       match => ["timestamp", "ISO8601"]
#       target => "@timestamp"
#     }
#     mutate {
#       add_field => { "log_type" => "error" }
#     }
#   } else if [log][file][path] =~ "access" {
#     grok {
#       match => { "message" => "%{IPORHOST:client_ip} - %{USER:remote_user} \[%{HTTPDATE:timestamp}\] \"%{WORD:http_method} %{DATA:url} HTTP/%{NUMBER:http_version}\" %{NUMBER:status} %{NUMBER:response_size} \"%{DATA:referrer}\" \"%{DATA:user_agent}\"" }
#     }
#     date {
#       match => ["timestamp", "dd/MMM/YYYY:H:m:s Z"]
#       target => "@timestamp"
#     }
#     mutate {
#       add_field => { "log_type" => "access" }
#     }
#   } else {
#     drop {}  # Drop events that don't match error or access patterns
#   }
# }

# output {
#   elasticsearch {
#     hosts => ["elasticsearch:9200"]
#     template => "/usr/share/logstash/templates/logstash.template.json"
#     template_name => "nginx-template"
#     template_overwrite => true
#     index => "nginx-%{+YYYY.MM.dd}-%{log_type}"
#     ecs_compatibility => "disabled"
#   }

#   stdout {
#     codec => rubydebug
#   }
# }
input {
  beats {
    port => 5044
  }
}

filter {
  if [log][file][path] =~ "error" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} \[%{WORD:log_level}\] %{GREEDYDATA:error_message}" }
    }
    date {
      match => ["timestamp", "ISO8601"]
      target => "@timestamp"
    }
    mutate {
      add_field => { "log_type" => "error" }
    }
  } else if [log][file][path] =~ "access" {
    grok {
      match => { "message" => "%{IPORHOST:client_ip} - %{USER:remote_user} \[%{HTTPDATE:timestamp}\] \"%{WORD:http_method} %{DATA:url} HTTP/%{NUMBER:http_version}\" %{NUMBER:status} %{NUMBER:response_size} \"%{DATA:referrer}\" \"%{DATA:user_agent}\"" }
    }
    mutate {
      add_field => { "log_type" => "access" }
    }
  } else {
    drop {}  # Drop events that don't match error or access patterns
  }

  ruby {
    code => 'event.set("@timestamp", LogStash::Timestamp.new(Time.now.utc))'
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    template => "/usr/share/logstash/templates/logstash.template.json"
    template_name => "nginx-template"
    template_overwrite => true
    index => "nginx-%{+YYYY.MM.dd}-%{log_type}"
    ecs_compatibility => "disabled"
  }

  stdout {
    codec => rubydebug
  }
}
